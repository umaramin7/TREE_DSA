class Solution {
  public:
  int findposition(vector<int> &inorder,int element,int inorderstart,int inorderend){
      for(int i=inorderstart;i<=inorderend;i++){
          if(inorder[i]==element){
              return i;
          }
      }
      return -1;
  }
   Node* solve(vector<int> &inorder, vector<int> &postorder,int &index,int inorderstart,int inorderend,int n){
      if(index <0 || inorderstart>inorderend){
          return NULL;
      }
          int element= postorder[index--];
          Node* root=new Node(element);
          int position=findposition(inorder,element,inorderstart,inorderend);
          root->right=solve(inorder,postorder,index,position+1,inorderend,n);
          root->left=solve(inorder,postorder,index,inorderstart,position-1,n);
    
          return root;
      
  } // Function to return a tree created from postorder and inoreder traversals.
    Node* buildTree(vector<int> inorder, vector<int> postorder) {
        int n = inorder.size();
        int postorderindex=n-1;
        
        Node* ans=solve(inorder,postorder,postorderindex,0,n-1,n);
        return ans;
    }
};
