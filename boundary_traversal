class Solution {
    private:
    void traverseleft(Node*root,vector<int> &ans){
        if((root==NULL) || (root->left==NULL && root ->right == NULL)){
            return;
        }
        ans.push_back(root->data);
        
        if(root->left){
            traverseleft(root 
->left,ans);
        }
        else{
            traverseleft(root->right,ans);
        }
        
    }
    void traverseleaf(Node*root,vector<int> &ans){
         if((root==NULL) || (root->left==NULL && root ->right == NULL)){
            return;
        }
        ans.push_back(root->data);
        
        traverseleaf(root->left,ans);
        traverseleaf(root->right,ans);
    }
    
    void traverseright(Node*root,vector<int> &ans){
         if((root==NULL) || (root->left==NULL && root ->right == NULL)){
            return;
        }
        ans.push_back(root->data);
        if(root->right){
            traverseright(root->right,ans);
        }
        else{
            traverseright(root->left,ans);
        }
        ans.push_back(root->data);
        
    }
    
  public:
    vector<int> boundaryTraversal(Node *root) {
      vector<int> ans;
      
      if(root == NULL){
          return ans;
     }
     //traverse only root
     ans.push_back(root->data);
     
     //traverse left subtree
     traverseleft(root->left,ans);
     
     // traverse leftsubtree leaf
     traverseleaf(root->left,ans);
      
      //traverse rightsubtree leaf
     traverseleaf(root->right,ans);
     
     //traverse right subtree
     traverseright(root->right,ans);
     
     
     return ans;
     
    }  
     
};
