class Solution {
  public:
  int findposition(vector<int> &inorder,int element,int inorderstart,int inorderend){
      for(int i=inorderstart;i<=inorderend;i++){
          if(inorder[i]==element){
              return i;
          }
      }
      return -1;
  }
  
  Node* solve(vector<int> &inorder, vector<int> &preorder,int &index,int inorderstart,int inorderend,int n){
      if(index>=n || inorderstart>inorderend){
          return NULL;
          }
          int element= preorder[index++];
          Node* root=new Node(element);
          int position=findposition(inorder,element,inorderstart,inorderend);
          
          root->left=solve(inorder,preorder,index,inorderstart,position-1,n);
          
          
          root->right=solve(inorder,preorder,index,position+1,inorderend,n);
          
          return root;
      
  }
    // Function to build the tree from given inorder and preorder traversals
    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
        // code here
        int preorderindex=0;
        int n = inorder.size();
        Node* ans=solve(inorder,preorder,preorderindex,0,n-1,n);
        return ans;
    }
};
